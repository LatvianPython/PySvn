import svn.exception
from datetime import datetime
from typing import Any, Iterable, List, Optional, Union

ChangeSet: Any
LogEntry: Any

class CommonClient(svn.common_base.CommonBase):
    def __init__(self, url_or_path: Any, type_: Any, username: Optional[Any] = ..., password: Optional[Any] = ..., svn_filepath: str = ..., trust_cert: Optional[Any] = ..., env: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def run_command(self, subcommand: str, args: List[str], **kwargs: Any) -> Union[List[str], bytes]: ...
    def info(self, rel_path: Optional[Any] = ..., revision: Optional[Any] = ...): ...
    def properties(self, rel_path: Optional[Any] = ...): ...
    def cat(self, rel_filepath: str, revision: Optional[int]=...) -> bytes: ...
    def log_default(self, timestamp_from_dt: Optional[datetime]=..., timestamp_to_dt: Optional[datetime]=..., limit: Optional[int]=..., rel_filepath: Optional[str]=..., stop_on_copy: bool=..., revision_from: Optional[int]=..., revision_to: Optional[int]=..., changelist: bool=..., use_merge_history: bool=...) -> Iterable[LogEntry]: ...
    def export(self, to_path: Any, revision: Optional[Any] = ..., force: bool = ...) -> None: ...
    def list(self, extended: bool = ..., rel_path: Optional[Any] = ...) -> None: ...
    def list_recursive(self, rel_path: Optional[Any] = ..., yield_dirs: bool = ..., path_filter_cb: Optional[Any] = ...) -> None: ...
    def diff_summary(self, old: Any, new: Any, rel_path: Optional[Any] = ...): ...
    def diff(self, old: Any, new: Any, rel_path: Optional[Any] = ...): ...
    @property
    def url(self): ...
    @property
    def path(self): ...
